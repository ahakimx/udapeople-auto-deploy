version: 2.1
orbs:
  slack: circleci/slack@3.4.2

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws s3 rb "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --force
            aws cloudformation delete-stack --stack-name "udapeople-fe-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-be-${CIRCLE_WORKFLOW_ID:0:7}"


  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
           cd frontend
           npm i
           npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/status:
          channel: C01QYBBAH43
          fail_only: true
          webhook: $hook

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/status:
          channel: C01QYBBAH43
          fail_only: true
          webhook: $hook

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout

      # Restore from cache
      - restore_cache:
          keys: [frontend-build] 

      # Your job code here
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm i
            npm run test
          no_output_timeout: 30m
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: run backend test
          command: |
            cd backend
            npm i
            npm run test

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache 
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: run frontend scan
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical
          no_output_timeout: 30m
      - slack/status:
          channel: C01QYBBAH43
          fail_only: true
          webhook: $hook

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache 
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: run backend scan
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
      - slack/status:
          channel: C01QYBBAH43
          fail_only: true
          webhook: $hook

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli

    steps:
      # Checkout code from git
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-be-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-be-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-fe-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-fe-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:project,Values=udapeople-be-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text >> ./.circleci/ansible/inventory.txt
            cat ./.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .circleci/ansible/
          paths:
            - inventory.txt
      # Here's where you will add some code to rollback on failure     
      - destroy-environment 

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["1c:d3:72:de:8a:c3:b4:84:bd:3a:ba:ef:6d:89:6f:aa"]
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli
      - run:
          name: Configure server
          command: |
            echo ENVIRONMENT=$ENVIRONMENT > "backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION > "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST > "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT > "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME > "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD > "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE > "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS > "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR > "backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES > "backend/.env"
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment      

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y awscli
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            npm install
            npm run migrations > dbmigrate.txt
            cat dbmigrate.txt
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            if grep "has been executed successfully" dbmigrate.txt
            then
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            else
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
     # Here's where you will add some code to rollback on failure
      - destroy-environment      

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
            aws --version
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters Name=tag:project,Values=udapeople-be-${CIRCLE_WORKFLOW_ID:0:7} --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL="http://${BACKEND_IP}:3030" > "frontend/.env"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm i
            npm run build
            cd dist
            aws s3 cp . s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive 
      # Here's where you will add some code to rollback on failure 
      - destroy-environment     
      - revert-migrations
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "1c:d3:72:de:8a:c3:b4:84:bd:3a:ba:ef:6d:89:6f:aa"
      - attach_workspace:
          at: .circleci/ansible/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl tar gzip ansible nodejs npm
            pip install awscli
      - run:
          name: Deploy backend
          no_output_timeout: 30m
          command: |
            echo "--- change dir to backend ----"
            cd backend
            echo "---- install dependency ----"
            npm i
            echo "--- build backend ---"
            npm run build

            echo "--- save env variable ---"
            echo ENVIRONMENT=$ENVIRONMENT >> "/root/project/backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "/root/project/backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "/root/project/backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "/root/project/backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "/root/project/backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "/root/project/backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "/root/project/backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "/root/project/backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "/root/project/backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "/root/project/backend/.env"

            echo "--- list all files ---"
            ls -lah

            echo "--- list dist files ---"
            ls ./dist

            echo "--- compress backend file ---"
            tar -czvf backend.tar.gz `ls -A -1`

            echo "---- change dir ------"
            cd ~/project/.circleci/ansible/

            echo "--- run playbook ---"
            ansible-playbook -i inventory.txt deploy-backend.yml
            
      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters Name=tag:project,Values=udapeople-be-${CIRCLE_WORKFLOW_ID:0:7} --output text)
            export API_URL="http://${BACKEND_IP}:3030/api/status"
            echo "${API_URL}"
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters Name=tag:project,Values=udapeople-be-${CIRCLE_WORKFLOW_ID:0:7} --output text)
            export API_URL="http://${BACKEND_IP}:3030/api/status"
            echo "${API_URL}"
            curl ${API_URL}

      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
            return 0
            else
            return 1
            fi

      # Here's where you will add some code to rollback on failure  

      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar
            yum install -y gzip
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
                  list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                  --no-paginate --output text) > ~/oldworkflowid.txt

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                  --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) >> ~/oldstack.txt

            echo OldWorkflow ID: "$OldWorkflowID"
            echo Old stacks ID: "$STACKS"

            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name udapeople-cloudfront \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"

      - persist_to_workspace:
          root: ~/
          paths:
            - oldworkflowid.txt
            - oldstack.txt

      # Here's where you will add some code to rollback on failure  
      - destroy-environment
      - revert-migrations

  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar
            yum install -y gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id
          command: |
            echo OldWorkflow ID: $(cat ~/oldworkflowid.txt)
            echo Old Stacks: $(cat ~/oldstack.txt)

            export NewWorkflowID=$(aws cloudformation \
                  list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                  --no-paginate --output text)

            #put the list of stacks here
            export NEWSTACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                  --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo NewWorkflow ID: $NewWorkflowID
            echo new Stacks: $NEWSTACKS
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(cat ~/oldworkflowid.txt)
            export STACKS=$(cat ~/oldstack.txt)

            echo $OldWorkflowID
            echo $STACKS

            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm s3://udapeople-${OldWorkflowID} --recursive
              aws cloudformation delete-stack --stack-name udapeople-be-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name udapeople-fe-${OldWorkflowID}
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
          context: slack-secret
      - test-backend:
          requires: [build-backend]
          context: slack-secret
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]